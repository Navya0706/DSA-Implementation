#Linked list

class Node:
    def __init__(self,value):
        self.value=value
        self.next=None
class LinkedList:
    def __init__(self):
        self.head=None

    def insertbegin(self,value):
        newnode=Node(value)
        newnode.next=self.head
        self.head=newnode

    def insertatpos(self,value,pos):
        pass
        
        
    def insertend(self,value):
        newnode=Node(value)
        if self.head is None:
            self.head=newnode
            return
        x=self.head
        while x.next is not None:
            x=x.next
        x.next=newnode
        
    def deletefront(self):
        if self.head is not None:
            self.head=self.head.next

    def deleteatpos(self,pos):
        pass
        
        
    def deletend(self):
        if self.head is None:
            return
        if self.head.next is None:
            return 
        x=self.head
        while x.next.next is not None:
            x=x.next
        x.next=None
        
    def length(self):
        count=0
        x=self.head
        while x is not None:
            count+=1
            x=x.next
        return count
        
    def printll(self):
        x=self.head
        while x is not None:
            print(x.value,end="->")
            x=x.next
        #print("none")
        
    def access(self,k):
        x = self.head
        for i in range(k):
            if x is None:
                return -1
            else:
                x = x.next
        return -1 if x is None else x.value
        
    def search(self,value):
        x = self.head
        while x is not None:
             if x.value == value:
                return True
             x = x.next
        return None
        

ll=LinkedList()
ll.insertbegin(10)
ll.insertbegin(20)
ll.insertbegin(30)
ll.insertend(40)
ll.insertend(50)

print(ll.printll())

ll.deletefront()
ll.deletend()
print(ll.printll())

print(ll.search(10))
print(ll.access(2))
            
        
