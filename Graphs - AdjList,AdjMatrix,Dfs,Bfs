#graph-adjlist,adjmatrix,dfs,bfs

from collections import defaultdict, deque

class Graph:
    def __init__(self, num_nodes):
        self.adj_list = defaultdict(list)
        self.num_nodes = num_nodes
        self.adj_matrix = [[0 for _ in range(num_nodes)] for _ in range(num_nodes)]

    def add_edge(self, u, v, undirected=True):
        self.adj_list[u].append(v)
        if undirected:
            self.adj_list[v].append(u)

        self.adj_matrix[u - 1][v - 1] = 1  
        if undirected:
            self.adj_matrix[v - 1][u - 1] = 1

 
    def dfs(self, start, visited=None):
        if visited is None:
            visited = set()
        visited.add(start)
        print(start, end=" ")
        for neighbor in self.adj_list[start]:
            if neighbor not in visited:
                self.dfs(neighbor, visited)


    def bfs(self, start):
        visited = set()
        queue = deque([start])
        visited.add(start)

        while queue:
            node = queue.popleft()
            print(node, end=" ")
            for neighbor in self.adj_list[node]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)


    def print_adj_list(self):
        print("Adjacency List:")
        for node in self.adj_list:
            print(f"{node}: {self.adj_list[node]}")


    def print_adj_matrix(self):
        print("Adjacency Matrix:")
        for row in self.adj_matrix:
            print(" ".join(map(str, row)))


num_nodes = 7
g = Graph(num_nodes)


g.add_edge(1, 2)
g.add_edge(1, 3)
g.add_edge(2, 4)
g.add_edge(2, 5)
g.add_edge(3, 6)
g.add_edge(3, 7)


g.print_adj_list()


g.print_adj_matrix()

print("\nDFS Traversal:")
g.dfs(1)  

print("\n\nBFS Traversal:")
g.bfs(1) 
